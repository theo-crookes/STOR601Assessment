// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// in_hull
std::string in_hull(std::vector<std::vector<double>> input_points, std::vector<std::vector<double> > convex_hull_edges);
RcppExport SEXP _tcc_in_hull(SEXP input_pointsSEXP, SEXP convex_hull_edgesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<std::vector<double>> >::type input_points(input_pointsSEXP);
    Rcpp::traits::input_parameter< std::vector<std::vector<double> > >::type convex_hull_edges(convex_hull_edgesSEXP);
    rcpp_result_gen = Rcpp::wrap(in_hull(input_points, convex_hull_edges));
    return rcpp_result_gen;
END_RCPP
}
// jarvis_march
std::vector<std::vector<double> > jarvis_march(std::vector<std::vector<double> > data);
RcppExport SEXP _tcc_jarvis_march(SEXP dataSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<std::vector<double> > >::type data(dataSEXP);
    rcpp_result_gen = Rcpp::wrap(jarvis_march(data));
    return rcpp_result_gen;
END_RCPP
}
// length_of_hull
double length_of_hull(std::vector<std::vector<double>> convex_hull);
RcppExport SEXP _tcc_length_of_hull(SEXP convex_hullSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<std::vector<double>> >::type convex_hull(convex_hullSEXP);
    rcpp_result_gen = Rcpp::wrap(length_of_hull(convex_hull));
    return rcpp_result_gen;
END_RCPP
}
// maximumdist
double maximumdist(std::vector<std::vector<double>> data);
RcppExport SEXP _tcc_maximumdist(SEXP dataSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<std::vector<double>> >::type data(dataSEXP);
    rcpp_result_gen = Rcpp::wrap(maximumdist(data));
    return rcpp_result_gen;
END_RCPP
}
// maximumdist_pair
std::vector<std::vector<double> > maximumdist_pair(std::vector<std::vector<double> > data);
RcppExport SEXP _tcc_maximumdist_pair(SEXP dataSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<std::vector<double> > >::type data(dataSEXP);
    rcpp_result_gen = Rcpp::wrap(maximumdist_pair(data));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_tcc_in_hull", (DL_FUNC) &_tcc_in_hull, 2},
    {"_tcc_jarvis_march", (DL_FUNC) &_tcc_jarvis_march, 1},
    {"_tcc_length_of_hull", (DL_FUNC) &_tcc_length_of_hull, 1},
    {"_tcc_maximumdist", (DL_FUNC) &_tcc_maximumdist, 1},
    {"_tcc_maximumdist_pair", (DL_FUNC) &_tcc_maximumdist_pair, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_tcc(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
